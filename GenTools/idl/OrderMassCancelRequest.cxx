// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OrderMassCancelRequest.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "OrderMassCancelRequest.h"

#include "OrderMassCancelRequestTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace DistributedATS_OrderMassCancelRequest {



OrderMassCancelRequest::OrderMassCancelRequest()
{
    // Just to register all known types
    registerOrderMassCancelRequestTypes();
}

OrderMassCancelRequest::~OrderMassCancelRequest()
{
}

OrderMassCancelRequest::OrderMassCancelRequest(
        const OrderMassCancelRequest& x)
{
    m_header = x.m_header;
    m_ClOrdID = x.m_ClOrdID;
    m_MassCancelRequestType = x.m_MassCancelRequestType;
    m_Symbol = x.m_Symbol;
    m_SecurityExchange = x.m_SecurityExchange;
    m_TransactTime = x.m_TransactTime;
    m_Text = x.m_Text;
}

OrderMassCancelRequest::OrderMassCancelRequest(
        OrderMassCancelRequest&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_ClOrdID = std::move(x.m_ClOrdID);
    m_MassCancelRequestType = x.m_MassCancelRequestType;
    m_Symbol = std::move(x.m_Symbol);
    m_SecurityExchange = std::move(x.m_SecurityExchange);
    m_TransactTime = x.m_TransactTime;
    m_Text = std::move(x.m_Text);
}

OrderMassCancelRequest& OrderMassCancelRequest::operator =(
        const OrderMassCancelRequest& x)
{

    m_header = x.m_header;
    m_ClOrdID = x.m_ClOrdID;
    m_MassCancelRequestType = x.m_MassCancelRequestType;
    m_Symbol = x.m_Symbol;
    m_SecurityExchange = x.m_SecurityExchange;
    m_TransactTime = x.m_TransactTime;
    m_Text = x.m_Text;
    return *this;
}

OrderMassCancelRequest& OrderMassCancelRequest::operator =(
        OrderMassCancelRequest&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_ClOrdID = std::move(x.m_ClOrdID);
    m_MassCancelRequestType = x.m_MassCancelRequestType;
    m_Symbol = std::move(x.m_Symbol);
    m_SecurityExchange = std::move(x.m_SecurityExchange);
    m_TransactTime = x.m_TransactTime;
    m_Text = std::move(x.m_Text);
    return *this;
}

bool OrderMassCancelRequest::operator ==(
        const OrderMassCancelRequest& x) const
{
    return (m_header == x.m_header &&
           m_ClOrdID == x.m_ClOrdID &&
           m_MassCancelRequestType == x.m_MassCancelRequestType &&
           m_Symbol == x.m_Symbol &&
           m_SecurityExchange == x.m_SecurityExchange &&
           m_TransactTime == x.m_TransactTime &&
           m_Text == x.m_Text);
}

bool OrderMassCancelRequest::operator !=(
        const OrderMassCancelRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void OrderMassCancelRequest::header(
        const DistributedATS::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void OrderMassCancelRequest::header(
        DistributedATS::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const DistributedATS::Header& OrderMassCancelRequest::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
DistributedATS::Header& OrderMassCancelRequest::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member ClOrdID
 * @param _ClOrdID New value to be copied in member ClOrdID
 */
void OrderMassCancelRequest::ClOrdID(
        const std::string& _ClOrdID)
{
    m_ClOrdID = _ClOrdID;
}

/*!
 * @brief This function moves the value in member ClOrdID
 * @param _ClOrdID New value to be moved in member ClOrdID
 */
void OrderMassCancelRequest::ClOrdID(
        std::string&& _ClOrdID)
{
    m_ClOrdID = std::move(_ClOrdID);
}

/*!
 * @brief This function returns a constant reference to member ClOrdID
 * @return Constant reference to member ClOrdID
 */
const std::string& OrderMassCancelRequest::ClOrdID() const
{
    return m_ClOrdID;
}

/*!
 * @brief This function returns a reference to member ClOrdID
 * @return Reference to member ClOrdID
 */
std::string& OrderMassCancelRequest::ClOrdID()
{
    return m_ClOrdID;
}


/*!
 * @brief This function sets a value in member MassCancelRequestType
 * @param _MassCancelRequestType New value for member MassCancelRequestType
 */
void OrderMassCancelRequest::MassCancelRequestType(
        char _MassCancelRequestType)
{
    m_MassCancelRequestType = _MassCancelRequestType;
}

/*!
 * @brief This function returns the value of member MassCancelRequestType
 * @return Value of member MassCancelRequestType
 */
char OrderMassCancelRequest::MassCancelRequestType() const
{
    return m_MassCancelRequestType;
}

/*!
 * @brief This function returns a reference to member MassCancelRequestType
 * @return Reference to member MassCancelRequestType
 */
char& OrderMassCancelRequest::MassCancelRequestType()
{
    return m_MassCancelRequestType;
}


/*!
 * @brief This function copies the value in member Symbol
 * @param _Symbol New value to be copied in member Symbol
 */
void OrderMassCancelRequest::Symbol(
        const std::string& _Symbol)
{
    m_Symbol = _Symbol;
}

/*!
 * @brief This function moves the value in member Symbol
 * @param _Symbol New value to be moved in member Symbol
 */
void OrderMassCancelRequest::Symbol(
        std::string&& _Symbol)
{
    m_Symbol = std::move(_Symbol);
}

/*!
 * @brief This function returns a constant reference to member Symbol
 * @return Constant reference to member Symbol
 */
const std::string& OrderMassCancelRequest::Symbol() const
{
    return m_Symbol;
}

/*!
 * @brief This function returns a reference to member Symbol
 * @return Reference to member Symbol
 */
std::string& OrderMassCancelRequest::Symbol()
{
    return m_Symbol;
}


/*!
 * @brief This function copies the value in member SecurityExchange
 * @param _SecurityExchange New value to be copied in member SecurityExchange
 */
void OrderMassCancelRequest::SecurityExchange(
        const std::string& _SecurityExchange)
{
    m_SecurityExchange = _SecurityExchange;
}

/*!
 * @brief This function moves the value in member SecurityExchange
 * @param _SecurityExchange New value to be moved in member SecurityExchange
 */
void OrderMassCancelRequest::SecurityExchange(
        std::string&& _SecurityExchange)
{
    m_SecurityExchange = std::move(_SecurityExchange);
}

/*!
 * @brief This function returns a constant reference to member SecurityExchange
 * @return Constant reference to member SecurityExchange
 */
const std::string& OrderMassCancelRequest::SecurityExchange() const
{
    return m_SecurityExchange;
}

/*!
 * @brief This function returns a reference to member SecurityExchange
 * @return Reference to member SecurityExchange
 */
std::string& OrderMassCancelRequest::SecurityExchange()
{
    return m_SecurityExchange;
}


/*!
 * @brief This function sets a value in member TransactTime
 * @param _TransactTime New value for member TransactTime
 */
void OrderMassCancelRequest::TransactTime(
        uint64_t _TransactTime)
{
    m_TransactTime = _TransactTime;
}

/*!
 * @brief This function returns the value of member TransactTime
 * @return Value of member TransactTime
 */
uint64_t OrderMassCancelRequest::TransactTime() const
{
    return m_TransactTime;
}

/*!
 * @brief This function returns a reference to member TransactTime
 * @return Reference to member TransactTime
 */
uint64_t& OrderMassCancelRequest::TransactTime()
{
    return m_TransactTime;
}


/*!
 * @brief This function copies the value in member Text
 * @param _Text New value to be copied in member Text
 */
void OrderMassCancelRequest::Text(
        const std::string& _Text)
{
    m_Text = _Text;
}

/*!
 * @brief This function moves the value in member Text
 * @param _Text New value to be moved in member Text
 */
void OrderMassCancelRequest::Text(
        std::string&& _Text)
{
    m_Text = std::move(_Text);
}

/*!
 * @brief This function returns a constant reference to member Text
 * @return Constant reference to member Text
 */
const std::string& OrderMassCancelRequest::Text() const
{
    return m_Text;
}

/*!
 * @brief This function returns a reference to member Text
 * @return Reference to member Text
 */
std::string& OrderMassCancelRequest::Text()
{
    return m_Text;
}




} // namespace DistributedATS_OrderMassCancelRequest
// Include auxiliary functions like for serializing/deserializing.
#include "OrderMassCancelRequestCdrAux.ipp"

