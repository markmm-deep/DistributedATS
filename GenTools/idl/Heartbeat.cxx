// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Heartbeat.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Heartbeat.h"

#include "HeartbeatTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace DistributedATS_Heartbeat {



Heartbeat::Heartbeat()
{
    // Just to register all known types
    registerHeartbeatTypes();
}

Heartbeat::~Heartbeat()
{
}

Heartbeat::Heartbeat(
        const Heartbeat& x)
{
    m_header = x.m_header;
}

Heartbeat::Heartbeat(
        Heartbeat&& x) noexcept
{
    m_header = std::move(x.m_header);
}

Heartbeat& Heartbeat::operator =(
        const Heartbeat& x)
{

    m_header = x.m_header;
    return *this;
}

Heartbeat& Heartbeat::operator =(
        Heartbeat&& x) noexcept
{

    m_header = std::move(x.m_header);
    return *this;
}

bool Heartbeat::operator ==(
        const Heartbeat& x) const
{
    return (m_header == x.m_header);
}

bool Heartbeat::operator !=(
        const Heartbeat& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void Heartbeat::header(
        const DistributedATS::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void Heartbeat::header(
        DistributedATS::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const DistributedATS::Header& Heartbeat::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
DistributedATS::Header& Heartbeat::header()
{
    return m_header;
}




} // namespace DistributedATS_Heartbeat
// Include auxiliary functions like for serializing/deserializing.
#include "HeartbeatCdrAux.ipp"

