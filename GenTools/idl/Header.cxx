// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Header.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Header.h"

#include "HeaderTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace DistributedATS {



Header::Header()
{
    // Just to register all known types
    registerHeaderTypes();
}

Header::~Header()
{
}

Header::Header(
        const Header& x)
{
    m_BeginString = x.m_BeginString;
    m_BodyLength = x.m_BodyLength;
    m_MsgType = x.m_MsgType;
    m_SenderCompID = x.m_SenderCompID;
    m_TargetCompID = x.m_TargetCompID;
    m_MsgSeqNum = x.m_MsgSeqNum;
    m_SenderSubID = x.m_SenderSubID;
    m_TargetSubID = x.m_TargetSubID;
    m_SendingTime = x.m_SendingTime;
}

Header::Header(
        Header&& x) noexcept
{
    m_BeginString = std::move(x.m_BeginString);
    m_BodyLength = x.m_BodyLength;
    m_MsgType = std::move(x.m_MsgType);
    m_SenderCompID = std::move(x.m_SenderCompID);
    m_TargetCompID = std::move(x.m_TargetCompID);
    m_MsgSeqNum = x.m_MsgSeqNum;
    m_SenderSubID = std::move(x.m_SenderSubID);
    m_TargetSubID = std::move(x.m_TargetSubID);
    m_SendingTime = x.m_SendingTime;
}

Header& Header::operator =(
        const Header& x)
{

    m_BeginString = x.m_BeginString;
    m_BodyLength = x.m_BodyLength;
    m_MsgType = x.m_MsgType;
    m_SenderCompID = x.m_SenderCompID;
    m_TargetCompID = x.m_TargetCompID;
    m_MsgSeqNum = x.m_MsgSeqNum;
    m_SenderSubID = x.m_SenderSubID;
    m_TargetSubID = x.m_TargetSubID;
    m_SendingTime = x.m_SendingTime;
    return *this;
}

Header& Header::operator =(
        Header&& x) noexcept
{

    m_BeginString = std::move(x.m_BeginString);
    m_BodyLength = x.m_BodyLength;
    m_MsgType = std::move(x.m_MsgType);
    m_SenderCompID = std::move(x.m_SenderCompID);
    m_TargetCompID = std::move(x.m_TargetCompID);
    m_MsgSeqNum = x.m_MsgSeqNum;
    m_SenderSubID = std::move(x.m_SenderSubID);
    m_TargetSubID = std::move(x.m_TargetSubID);
    m_SendingTime = x.m_SendingTime;
    return *this;
}

bool Header::operator ==(
        const Header& x) const
{
    return (m_BeginString == x.m_BeginString &&
           m_BodyLength == x.m_BodyLength &&
           m_MsgType == x.m_MsgType &&
           m_SenderCompID == x.m_SenderCompID &&
           m_TargetCompID == x.m_TargetCompID &&
           m_MsgSeqNum == x.m_MsgSeqNum &&
           m_SenderSubID == x.m_SenderSubID &&
           m_TargetSubID == x.m_TargetSubID &&
           m_SendingTime == x.m_SendingTime);
}

bool Header::operator !=(
        const Header& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member BeginString
 * @param _BeginString New value to be copied in member BeginString
 */
void Header::BeginString(
        const std::string& _BeginString)
{
    m_BeginString = _BeginString;
}

/*!
 * @brief This function moves the value in member BeginString
 * @param _BeginString New value to be moved in member BeginString
 */
void Header::BeginString(
        std::string&& _BeginString)
{
    m_BeginString = std::move(_BeginString);
}

/*!
 * @brief This function returns a constant reference to member BeginString
 * @return Constant reference to member BeginString
 */
const std::string& Header::BeginString() const
{
    return m_BeginString;
}

/*!
 * @brief This function returns a reference to member BeginString
 * @return Reference to member BeginString
 */
std::string& Header::BeginString()
{
    return m_BeginString;
}


/*!
 * @brief This function sets a value in member BodyLength
 * @param _BodyLength New value for member BodyLength
 */
void Header::BodyLength(
        int32_t _BodyLength)
{
    m_BodyLength = _BodyLength;
}

/*!
 * @brief This function returns the value of member BodyLength
 * @return Value of member BodyLength
 */
int32_t Header::BodyLength() const
{
    return m_BodyLength;
}

/*!
 * @brief This function returns a reference to member BodyLength
 * @return Reference to member BodyLength
 */
int32_t& Header::BodyLength()
{
    return m_BodyLength;
}


/*!
 * @brief This function copies the value in member MsgType
 * @param _MsgType New value to be copied in member MsgType
 */
void Header::MsgType(
        const std::string& _MsgType)
{
    m_MsgType = _MsgType;
}

/*!
 * @brief This function moves the value in member MsgType
 * @param _MsgType New value to be moved in member MsgType
 */
void Header::MsgType(
        std::string&& _MsgType)
{
    m_MsgType = std::move(_MsgType);
}

/*!
 * @brief This function returns a constant reference to member MsgType
 * @return Constant reference to member MsgType
 */
const std::string& Header::MsgType() const
{
    return m_MsgType;
}

/*!
 * @brief This function returns a reference to member MsgType
 * @return Reference to member MsgType
 */
std::string& Header::MsgType()
{
    return m_MsgType;
}


/*!
 * @brief This function copies the value in member SenderCompID
 * @param _SenderCompID New value to be copied in member SenderCompID
 */
void Header::SenderCompID(
        const std::string& _SenderCompID)
{
    m_SenderCompID = _SenderCompID;
}

/*!
 * @brief This function moves the value in member SenderCompID
 * @param _SenderCompID New value to be moved in member SenderCompID
 */
void Header::SenderCompID(
        std::string&& _SenderCompID)
{
    m_SenderCompID = std::move(_SenderCompID);
}

/*!
 * @brief This function returns a constant reference to member SenderCompID
 * @return Constant reference to member SenderCompID
 */
const std::string& Header::SenderCompID() const
{
    return m_SenderCompID;
}

/*!
 * @brief This function returns a reference to member SenderCompID
 * @return Reference to member SenderCompID
 */
std::string& Header::SenderCompID()
{
    return m_SenderCompID;
}


/*!
 * @brief This function copies the value in member TargetCompID
 * @param _TargetCompID New value to be copied in member TargetCompID
 */
void Header::TargetCompID(
        const std::string& _TargetCompID)
{
    m_TargetCompID = _TargetCompID;
}

/*!
 * @brief This function moves the value in member TargetCompID
 * @param _TargetCompID New value to be moved in member TargetCompID
 */
void Header::TargetCompID(
        std::string&& _TargetCompID)
{
    m_TargetCompID = std::move(_TargetCompID);
}

/*!
 * @brief This function returns a constant reference to member TargetCompID
 * @return Constant reference to member TargetCompID
 */
const std::string& Header::TargetCompID() const
{
    return m_TargetCompID;
}

/*!
 * @brief This function returns a reference to member TargetCompID
 * @return Reference to member TargetCompID
 */
std::string& Header::TargetCompID()
{
    return m_TargetCompID;
}


/*!
 * @brief This function sets a value in member MsgSeqNum
 * @param _MsgSeqNum New value for member MsgSeqNum
 */
void Header::MsgSeqNum(
        int32_t _MsgSeqNum)
{
    m_MsgSeqNum = _MsgSeqNum;
}

/*!
 * @brief This function returns the value of member MsgSeqNum
 * @return Value of member MsgSeqNum
 */
int32_t Header::MsgSeqNum() const
{
    return m_MsgSeqNum;
}

/*!
 * @brief This function returns a reference to member MsgSeqNum
 * @return Reference to member MsgSeqNum
 */
int32_t& Header::MsgSeqNum()
{
    return m_MsgSeqNum;
}


/*!
 * @brief This function copies the value in member SenderSubID
 * @param _SenderSubID New value to be copied in member SenderSubID
 */
void Header::SenderSubID(
        const std::string& _SenderSubID)
{
    m_SenderSubID = _SenderSubID;
}

/*!
 * @brief This function moves the value in member SenderSubID
 * @param _SenderSubID New value to be moved in member SenderSubID
 */
void Header::SenderSubID(
        std::string&& _SenderSubID)
{
    m_SenderSubID = std::move(_SenderSubID);
}

/*!
 * @brief This function returns a constant reference to member SenderSubID
 * @return Constant reference to member SenderSubID
 */
const std::string& Header::SenderSubID() const
{
    return m_SenderSubID;
}

/*!
 * @brief This function returns a reference to member SenderSubID
 * @return Reference to member SenderSubID
 */
std::string& Header::SenderSubID()
{
    return m_SenderSubID;
}


/*!
 * @brief This function copies the value in member TargetSubID
 * @param _TargetSubID New value to be copied in member TargetSubID
 */
void Header::TargetSubID(
        const std::string& _TargetSubID)
{
    m_TargetSubID = _TargetSubID;
}

/*!
 * @brief This function moves the value in member TargetSubID
 * @param _TargetSubID New value to be moved in member TargetSubID
 */
void Header::TargetSubID(
        std::string&& _TargetSubID)
{
    m_TargetSubID = std::move(_TargetSubID);
}

/*!
 * @brief This function returns a constant reference to member TargetSubID
 * @return Constant reference to member TargetSubID
 */
const std::string& Header::TargetSubID() const
{
    return m_TargetSubID;
}

/*!
 * @brief This function returns a reference to member TargetSubID
 * @return Reference to member TargetSubID
 */
std::string& Header::TargetSubID()
{
    return m_TargetSubID;
}


/*!
 * @brief This function sets a value in member SendingTime
 * @param _SendingTime New value for member SendingTime
 */
void Header::SendingTime(
        uint64_t _SendingTime)
{
    m_SendingTime = _SendingTime;
}

/*!
 * @brief This function returns the value of member SendingTime
 * @return Value of member SendingTime
 */
uint64_t Header::SendingTime() const
{
    return m_SendingTime;
}

/*!
 * @brief This function returns a reference to member SendingTime
 * @return Reference to member SendingTime
 */
uint64_t& Header::SendingTime()
{
    return m_SendingTime;
}




} // namespace DistributedATS
// Include auxiliary functions like for serializing/deserializing.
#include "HeaderCdrAux.ipp"

