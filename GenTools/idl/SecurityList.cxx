// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SecurityList.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SecurityList.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace DistributedATS_SecurityList {



NoRelatedSym::NoRelatedSym()
{
}

NoRelatedSym::~NoRelatedSym()
{
}

NoRelatedSym::NoRelatedSym(
        const NoRelatedSym& x)
{
    m_Symbol = x.m_Symbol;
    m_SecurityExchange = x.m_SecurityExchange;
    m_Text = x.m_Text;
}

NoRelatedSym::NoRelatedSym(
        NoRelatedSym&& x) noexcept
{
    m_Symbol = std::move(x.m_Symbol);
    m_SecurityExchange = std::move(x.m_SecurityExchange);
    m_Text = std::move(x.m_Text);
}

NoRelatedSym& NoRelatedSym::operator =(
        const NoRelatedSym& x)
{

    m_Symbol = x.m_Symbol;
    m_SecurityExchange = x.m_SecurityExchange;
    m_Text = x.m_Text;
    return *this;
}

NoRelatedSym& NoRelatedSym::operator =(
        NoRelatedSym&& x) noexcept
{

    m_Symbol = std::move(x.m_Symbol);
    m_SecurityExchange = std::move(x.m_SecurityExchange);
    m_Text = std::move(x.m_Text);
    return *this;
}

bool NoRelatedSym::operator ==(
        const NoRelatedSym& x) const
{
    return (m_Symbol == x.m_Symbol &&
           m_SecurityExchange == x.m_SecurityExchange &&
           m_Text == x.m_Text);
}

bool NoRelatedSym::operator !=(
        const NoRelatedSym& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member Symbol
 * @param _Symbol New value to be copied in member Symbol
 */
void NoRelatedSym::Symbol(
        const std::string& _Symbol)
{
    m_Symbol = _Symbol;
}

/*!
 * @brief This function moves the value in member Symbol
 * @param _Symbol New value to be moved in member Symbol
 */
void NoRelatedSym::Symbol(
        std::string&& _Symbol)
{
    m_Symbol = std::move(_Symbol);
}

/*!
 * @brief This function returns a constant reference to member Symbol
 * @return Constant reference to member Symbol
 */
const std::string& NoRelatedSym::Symbol() const
{
    return m_Symbol;
}

/*!
 * @brief This function returns a reference to member Symbol
 * @return Reference to member Symbol
 */
std::string& NoRelatedSym::Symbol()
{
    return m_Symbol;
}


/*!
 * @brief This function copies the value in member SecurityExchange
 * @param _SecurityExchange New value to be copied in member SecurityExchange
 */
void NoRelatedSym::SecurityExchange(
        const std::string& _SecurityExchange)
{
    m_SecurityExchange = _SecurityExchange;
}

/*!
 * @brief This function moves the value in member SecurityExchange
 * @param _SecurityExchange New value to be moved in member SecurityExchange
 */
void NoRelatedSym::SecurityExchange(
        std::string&& _SecurityExchange)
{
    m_SecurityExchange = std::move(_SecurityExchange);
}

/*!
 * @brief This function returns a constant reference to member SecurityExchange
 * @return Constant reference to member SecurityExchange
 */
const std::string& NoRelatedSym::SecurityExchange() const
{
    return m_SecurityExchange;
}

/*!
 * @brief This function returns a reference to member SecurityExchange
 * @return Reference to member SecurityExchange
 */
std::string& NoRelatedSym::SecurityExchange()
{
    return m_SecurityExchange;
}


/*!
 * @brief This function copies the value in member Text
 * @param _Text New value to be copied in member Text
 */
void NoRelatedSym::Text(
        const std::string& _Text)
{
    m_Text = _Text;
}

/*!
 * @brief This function moves the value in member Text
 * @param _Text New value to be moved in member Text
 */
void NoRelatedSym::Text(
        std::string&& _Text)
{
    m_Text = std::move(_Text);
}

/*!
 * @brief This function returns a constant reference to member Text
 * @return Constant reference to member Text
 */
const std::string& NoRelatedSym::Text() const
{
    return m_Text;
}

/*!
 * @brief This function returns a reference to member Text
 * @return Reference to member Text
 */
std::string& NoRelatedSym::Text()
{
    return m_Text;
}







SecurityList::SecurityList()
{
}

SecurityList::~SecurityList()
{
}

SecurityList::SecurityList(
        const SecurityList& x)
{
    m_header = x.m_header;
    m_SecurityReqID = x.m_SecurityReqID;
    m_SecurityResponseID = x.m_SecurityResponseID;
    m_SecurityRequestResult = x.m_SecurityRequestResult;
    m_c_NoRelatedSym = x.m_c_NoRelatedSym;
}

SecurityList::SecurityList(
        SecurityList&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_SecurityReqID = std::move(x.m_SecurityReqID);
    m_SecurityResponseID = std::move(x.m_SecurityResponseID);
    m_SecurityRequestResult = x.m_SecurityRequestResult;
    m_c_NoRelatedSym = std::move(x.m_c_NoRelatedSym);
}

SecurityList& SecurityList::operator =(
        const SecurityList& x)
{

    m_header = x.m_header;
    m_SecurityReqID = x.m_SecurityReqID;
    m_SecurityResponseID = x.m_SecurityResponseID;
    m_SecurityRequestResult = x.m_SecurityRequestResult;
    m_c_NoRelatedSym = x.m_c_NoRelatedSym;
    return *this;
}

SecurityList& SecurityList::operator =(
        SecurityList&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_SecurityReqID = std::move(x.m_SecurityReqID);
    m_SecurityResponseID = std::move(x.m_SecurityResponseID);
    m_SecurityRequestResult = x.m_SecurityRequestResult;
    m_c_NoRelatedSym = std::move(x.m_c_NoRelatedSym);
    return *this;
}

bool SecurityList::operator ==(
        const SecurityList& x) const
{
    return (m_header == x.m_header &&
           m_SecurityReqID == x.m_SecurityReqID &&
           m_SecurityResponseID == x.m_SecurityResponseID &&
           m_SecurityRequestResult == x.m_SecurityRequestResult &&
           m_c_NoRelatedSym == x.m_c_NoRelatedSym);
}

bool SecurityList::operator !=(
        const SecurityList& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void SecurityList::header(
        const DistributedATS::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void SecurityList::header(
        DistributedATS::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const DistributedATS::Header& SecurityList::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
DistributedATS::Header& SecurityList::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member SecurityReqID
 * @param _SecurityReqID New value to be copied in member SecurityReqID
 */
void SecurityList::SecurityReqID(
        const std::string& _SecurityReqID)
{
    m_SecurityReqID = _SecurityReqID;
}

/*!
 * @brief This function moves the value in member SecurityReqID
 * @param _SecurityReqID New value to be moved in member SecurityReqID
 */
void SecurityList::SecurityReqID(
        std::string&& _SecurityReqID)
{
    m_SecurityReqID = std::move(_SecurityReqID);
}

/*!
 * @brief This function returns a constant reference to member SecurityReqID
 * @return Constant reference to member SecurityReqID
 */
const std::string& SecurityList::SecurityReqID() const
{
    return m_SecurityReqID;
}

/*!
 * @brief This function returns a reference to member SecurityReqID
 * @return Reference to member SecurityReqID
 */
std::string& SecurityList::SecurityReqID()
{
    return m_SecurityReqID;
}


/*!
 * @brief This function copies the value in member SecurityResponseID
 * @param _SecurityResponseID New value to be copied in member SecurityResponseID
 */
void SecurityList::SecurityResponseID(
        const std::string& _SecurityResponseID)
{
    m_SecurityResponseID = _SecurityResponseID;
}

/*!
 * @brief This function moves the value in member SecurityResponseID
 * @param _SecurityResponseID New value to be moved in member SecurityResponseID
 */
void SecurityList::SecurityResponseID(
        std::string&& _SecurityResponseID)
{
    m_SecurityResponseID = std::move(_SecurityResponseID);
}

/*!
 * @brief This function returns a constant reference to member SecurityResponseID
 * @return Constant reference to member SecurityResponseID
 */
const std::string& SecurityList::SecurityResponseID() const
{
    return m_SecurityResponseID;
}

/*!
 * @brief This function returns a reference to member SecurityResponseID
 * @return Reference to member SecurityResponseID
 */
std::string& SecurityList::SecurityResponseID()
{
    return m_SecurityResponseID;
}


/*!
 * @brief This function sets a value in member SecurityRequestResult
 * @param _SecurityRequestResult New value for member SecurityRequestResult
 */
void SecurityList::SecurityRequestResult(
        int32_t _SecurityRequestResult)
{
    m_SecurityRequestResult = _SecurityRequestResult;
}

/*!
 * @brief This function returns the value of member SecurityRequestResult
 * @return Value of member SecurityRequestResult
 */
int32_t SecurityList::SecurityRequestResult() const
{
    return m_SecurityRequestResult;
}

/*!
 * @brief This function returns a reference to member SecurityRequestResult
 * @return Reference to member SecurityRequestResult
 */
int32_t& SecurityList::SecurityRequestResult()
{
    return m_SecurityRequestResult;
}


/*!
 * @brief This function copies the value in member c_NoRelatedSym
 * @param _c_NoRelatedSym New value to be copied in member c_NoRelatedSym
 */
void SecurityList::c_NoRelatedSym(
        const DistributedATS_SecurityList::NoRelatedSymSeq& _c_NoRelatedSym)
{
    m_c_NoRelatedSym = _c_NoRelatedSym;
}

/*!
 * @brief This function moves the value in member c_NoRelatedSym
 * @param _c_NoRelatedSym New value to be moved in member c_NoRelatedSym
 */
void SecurityList::c_NoRelatedSym(
        DistributedATS_SecurityList::NoRelatedSymSeq&& _c_NoRelatedSym)
{
    m_c_NoRelatedSym = std::move(_c_NoRelatedSym);
}

/*!
 * @brief This function returns a constant reference to member c_NoRelatedSym
 * @return Constant reference to member c_NoRelatedSym
 */
const DistributedATS_SecurityList::NoRelatedSymSeq& SecurityList::c_NoRelatedSym() const
{
    return m_c_NoRelatedSym;
}

/*!
 * @brief This function returns a reference to member c_NoRelatedSym
 * @return Reference to member c_NoRelatedSym
 */
DistributedATS_SecurityList::NoRelatedSymSeq& SecurityList::c_NoRelatedSym()
{
    return m_c_NoRelatedSym;
}




} // namespace DistributedATS_SecurityList
// Include auxiliary functions like for serializing/deserializing.
#include "SecurityListCdrAux.ipp"

