// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OrderCancelReplaceRequest.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "OrderCancelReplaceRequest.h"

#include "OrderCancelReplaceRequestTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace DistributedATS_OrderCancelReplaceRequest {



OrderCancelReplaceRequest::OrderCancelReplaceRequest()
{
    // Just to register all known types
    registerOrderCancelReplaceRequestTypes();
}

OrderCancelReplaceRequest::~OrderCancelReplaceRequest()
{
}

OrderCancelReplaceRequest::OrderCancelReplaceRequest(
        const OrderCancelReplaceRequest& x)
{
    m_header = x.m_header;
    m_OrigClOrdID = x.m_OrigClOrdID;
    m_ClOrdID = x.m_ClOrdID;
    m_ExecInst = x.m_ExecInst;
    m_Symbol = x.m_Symbol;
    m_SecurityExchange = x.m_SecurityExchange;
    m_Side = x.m_Side;
    m_TransactTime = x.m_TransactTime;
    m_OrderQty = x.m_OrderQty;
    m_OrdType = x.m_OrdType;
    m_Price = x.m_Price;
    m_StopPx = x.m_StopPx;
    m_TimeInForce = x.m_TimeInForce;
    m_Text = x.m_Text;
}

OrderCancelReplaceRequest::OrderCancelReplaceRequest(
        OrderCancelReplaceRequest&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_OrigClOrdID = std::move(x.m_OrigClOrdID);
    m_ClOrdID = std::move(x.m_ClOrdID);
    m_ExecInst = std::move(x.m_ExecInst);
    m_Symbol = std::move(x.m_Symbol);
    m_SecurityExchange = std::move(x.m_SecurityExchange);
    m_Side = x.m_Side;
    m_TransactTime = x.m_TransactTime;
    m_OrderQty = x.m_OrderQty;
    m_OrdType = x.m_OrdType;
    m_Price = x.m_Price;
    m_StopPx = x.m_StopPx;
    m_TimeInForce = x.m_TimeInForce;
    m_Text = std::move(x.m_Text);
}

OrderCancelReplaceRequest& OrderCancelReplaceRequest::operator =(
        const OrderCancelReplaceRequest& x)
{

    m_header = x.m_header;
    m_OrigClOrdID = x.m_OrigClOrdID;
    m_ClOrdID = x.m_ClOrdID;
    m_ExecInst = x.m_ExecInst;
    m_Symbol = x.m_Symbol;
    m_SecurityExchange = x.m_SecurityExchange;
    m_Side = x.m_Side;
    m_TransactTime = x.m_TransactTime;
    m_OrderQty = x.m_OrderQty;
    m_OrdType = x.m_OrdType;
    m_Price = x.m_Price;
    m_StopPx = x.m_StopPx;
    m_TimeInForce = x.m_TimeInForce;
    m_Text = x.m_Text;
    return *this;
}

OrderCancelReplaceRequest& OrderCancelReplaceRequest::operator =(
        OrderCancelReplaceRequest&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_OrigClOrdID = std::move(x.m_OrigClOrdID);
    m_ClOrdID = std::move(x.m_ClOrdID);
    m_ExecInst = std::move(x.m_ExecInst);
    m_Symbol = std::move(x.m_Symbol);
    m_SecurityExchange = std::move(x.m_SecurityExchange);
    m_Side = x.m_Side;
    m_TransactTime = x.m_TransactTime;
    m_OrderQty = x.m_OrderQty;
    m_OrdType = x.m_OrdType;
    m_Price = x.m_Price;
    m_StopPx = x.m_StopPx;
    m_TimeInForce = x.m_TimeInForce;
    m_Text = std::move(x.m_Text);
    return *this;
}

bool OrderCancelReplaceRequest::operator ==(
        const OrderCancelReplaceRequest& x) const
{
    return (m_header == x.m_header &&
           m_OrigClOrdID == x.m_OrigClOrdID &&
           m_ClOrdID == x.m_ClOrdID &&
           m_ExecInst == x.m_ExecInst &&
           m_Symbol == x.m_Symbol &&
           m_SecurityExchange == x.m_SecurityExchange &&
           m_Side == x.m_Side &&
           m_TransactTime == x.m_TransactTime &&
           m_OrderQty == x.m_OrderQty &&
           m_OrdType == x.m_OrdType &&
           m_Price == x.m_Price &&
           m_StopPx == x.m_StopPx &&
           m_TimeInForce == x.m_TimeInForce &&
           m_Text == x.m_Text);
}

bool OrderCancelReplaceRequest::operator !=(
        const OrderCancelReplaceRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void OrderCancelReplaceRequest::header(
        const DistributedATS::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void OrderCancelReplaceRequest::header(
        DistributedATS::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const DistributedATS::Header& OrderCancelReplaceRequest::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
DistributedATS::Header& OrderCancelReplaceRequest::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member OrigClOrdID
 * @param _OrigClOrdID New value to be copied in member OrigClOrdID
 */
void OrderCancelReplaceRequest::OrigClOrdID(
        const std::string& _OrigClOrdID)
{
    m_OrigClOrdID = _OrigClOrdID;
}

/*!
 * @brief This function moves the value in member OrigClOrdID
 * @param _OrigClOrdID New value to be moved in member OrigClOrdID
 */
void OrderCancelReplaceRequest::OrigClOrdID(
        std::string&& _OrigClOrdID)
{
    m_OrigClOrdID = std::move(_OrigClOrdID);
}

/*!
 * @brief This function returns a constant reference to member OrigClOrdID
 * @return Constant reference to member OrigClOrdID
 */
const std::string& OrderCancelReplaceRequest::OrigClOrdID() const
{
    return m_OrigClOrdID;
}

/*!
 * @brief This function returns a reference to member OrigClOrdID
 * @return Reference to member OrigClOrdID
 */
std::string& OrderCancelReplaceRequest::OrigClOrdID()
{
    return m_OrigClOrdID;
}


/*!
 * @brief This function copies the value in member ClOrdID
 * @param _ClOrdID New value to be copied in member ClOrdID
 */
void OrderCancelReplaceRequest::ClOrdID(
        const std::string& _ClOrdID)
{
    m_ClOrdID = _ClOrdID;
}

/*!
 * @brief This function moves the value in member ClOrdID
 * @param _ClOrdID New value to be moved in member ClOrdID
 */
void OrderCancelReplaceRequest::ClOrdID(
        std::string&& _ClOrdID)
{
    m_ClOrdID = std::move(_ClOrdID);
}

/*!
 * @brief This function returns a constant reference to member ClOrdID
 * @return Constant reference to member ClOrdID
 */
const std::string& OrderCancelReplaceRequest::ClOrdID() const
{
    return m_ClOrdID;
}

/*!
 * @brief This function returns a reference to member ClOrdID
 * @return Reference to member ClOrdID
 */
std::string& OrderCancelReplaceRequest::ClOrdID()
{
    return m_ClOrdID;
}


/*!
 * @brief This function copies the value in member ExecInst
 * @param _ExecInst New value to be copied in member ExecInst
 */
void OrderCancelReplaceRequest::ExecInst(
        const std::string& _ExecInst)
{
    m_ExecInst = _ExecInst;
}

/*!
 * @brief This function moves the value in member ExecInst
 * @param _ExecInst New value to be moved in member ExecInst
 */
void OrderCancelReplaceRequest::ExecInst(
        std::string&& _ExecInst)
{
    m_ExecInst = std::move(_ExecInst);
}

/*!
 * @brief This function returns a constant reference to member ExecInst
 * @return Constant reference to member ExecInst
 */
const std::string& OrderCancelReplaceRequest::ExecInst() const
{
    return m_ExecInst;
}

/*!
 * @brief This function returns a reference to member ExecInst
 * @return Reference to member ExecInst
 */
std::string& OrderCancelReplaceRequest::ExecInst()
{
    return m_ExecInst;
}


/*!
 * @brief This function copies the value in member Symbol
 * @param _Symbol New value to be copied in member Symbol
 */
void OrderCancelReplaceRequest::Symbol(
        const std::string& _Symbol)
{
    m_Symbol = _Symbol;
}

/*!
 * @brief This function moves the value in member Symbol
 * @param _Symbol New value to be moved in member Symbol
 */
void OrderCancelReplaceRequest::Symbol(
        std::string&& _Symbol)
{
    m_Symbol = std::move(_Symbol);
}

/*!
 * @brief This function returns a constant reference to member Symbol
 * @return Constant reference to member Symbol
 */
const std::string& OrderCancelReplaceRequest::Symbol() const
{
    return m_Symbol;
}

/*!
 * @brief This function returns a reference to member Symbol
 * @return Reference to member Symbol
 */
std::string& OrderCancelReplaceRequest::Symbol()
{
    return m_Symbol;
}


/*!
 * @brief This function copies the value in member SecurityExchange
 * @param _SecurityExchange New value to be copied in member SecurityExchange
 */
void OrderCancelReplaceRequest::SecurityExchange(
        const std::string& _SecurityExchange)
{
    m_SecurityExchange = _SecurityExchange;
}

/*!
 * @brief This function moves the value in member SecurityExchange
 * @param _SecurityExchange New value to be moved in member SecurityExchange
 */
void OrderCancelReplaceRequest::SecurityExchange(
        std::string&& _SecurityExchange)
{
    m_SecurityExchange = std::move(_SecurityExchange);
}

/*!
 * @brief This function returns a constant reference to member SecurityExchange
 * @return Constant reference to member SecurityExchange
 */
const std::string& OrderCancelReplaceRequest::SecurityExchange() const
{
    return m_SecurityExchange;
}

/*!
 * @brief This function returns a reference to member SecurityExchange
 * @return Reference to member SecurityExchange
 */
std::string& OrderCancelReplaceRequest::SecurityExchange()
{
    return m_SecurityExchange;
}


/*!
 * @brief This function sets a value in member Side
 * @param _Side New value for member Side
 */
void OrderCancelReplaceRequest::Side(
        char _Side)
{
    m_Side = _Side;
}

/*!
 * @brief This function returns the value of member Side
 * @return Value of member Side
 */
char OrderCancelReplaceRequest::Side() const
{
    return m_Side;
}

/*!
 * @brief This function returns a reference to member Side
 * @return Reference to member Side
 */
char& OrderCancelReplaceRequest::Side()
{
    return m_Side;
}


/*!
 * @brief This function sets a value in member TransactTime
 * @param _TransactTime New value for member TransactTime
 */
void OrderCancelReplaceRequest::TransactTime(
        uint64_t _TransactTime)
{
    m_TransactTime = _TransactTime;
}

/*!
 * @brief This function returns the value of member TransactTime
 * @return Value of member TransactTime
 */
uint64_t OrderCancelReplaceRequest::TransactTime() const
{
    return m_TransactTime;
}

/*!
 * @brief This function returns a reference to member TransactTime
 * @return Reference to member TransactTime
 */
uint64_t& OrderCancelReplaceRequest::TransactTime()
{
    return m_TransactTime;
}


/*!
 * @brief This function sets a value in member OrderQty
 * @param _OrderQty New value for member OrderQty
 */
void OrderCancelReplaceRequest::OrderQty(
        int32_t _OrderQty)
{
    m_OrderQty = _OrderQty;
}

/*!
 * @brief This function returns the value of member OrderQty
 * @return Value of member OrderQty
 */
int32_t OrderCancelReplaceRequest::OrderQty() const
{
    return m_OrderQty;
}

/*!
 * @brief This function returns a reference to member OrderQty
 * @return Reference to member OrderQty
 */
int32_t& OrderCancelReplaceRequest::OrderQty()
{
    return m_OrderQty;
}


/*!
 * @brief This function sets a value in member OrdType
 * @param _OrdType New value for member OrdType
 */
void OrderCancelReplaceRequest::OrdType(
        char _OrdType)
{
    m_OrdType = _OrdType;
}

/*!
 * @brief This function returns the value of member OrdType
 * @return Value of member OrdType
 */
char OrderCancelReplaceRequest::OrdType() const
{
    return m_OrdType;
}

/*!
 * @brief This function returns a reference to member OrdType
 * @return Reference to member OrdType
 */
char& OrderCancelReplaceRequest::OrdType()
{
    return m_OrdType;
}


/*!
 * @brief This function sets a value in member Price
 * @param _Price New value for member Price
 */
void OrderCancelReplaceRequest::Price(
        float _Price)
{
    m_Price = _Price;
}

/*!
 * @brief This function returns the value of member Price
 * @return Value of member Price
 */
float OrderCancelReplaceRequest::Price() const
{
    return m_Price;
}

/*!
 * @brief This function returns a reference to member Price
 * @return Reference to member Price
 */
float& OrderCancelReplaceRequest::Price()
{
    return m_Price;
}


/*!
 * @brief This function sets a value in member StopPx
 * @param _StopPx New value for member StopPx
 */
void OrderCancelReplaceRequest::StopPx(
        float _StopPx)
{
    m_StopPx = _StopPx;
}

/*!
 * @brief This function returns the value of member StopPx
 * @return Value of member StopPx
 */
float OrderCancelReplaceRequest::StopPx() const
{
    return m_StopPx;
}

/*!
 * @brief This function returns a reference to member StopPx
 * @return Reference to member StopPx
 */
float& OrderCancelReplaceRequest::StopPx()
{
    return m_StopPx;
}


/*!
 * @brief This function sets a value in member TimeInForce
 * @param _TimeInForce New value for member TimeInForce
 */
void OrderCancelReplaceRequest::TimeInForce(
        char _TimeInForce)
{
    m_TimeInForce = _TimeInForce;
}

/*!
 * @brief This function returns the value of member TimeInForce
 * @return Value of member TimeInForce
 */
char OrderCancelReplaceRequest::TimeInForce() const
{
    return m_TimeInForce;
}

/*!
 * @brief This function returns a reference to member TimeInForce
 * @return Reference to member TimeInForce
 */
char& OrderCancelReplaceRequest::TimeInForce()
{
    return m_TimeInForce;
}


/*!
 * @brief This function copies the value in member Text
 * @param _Text New value to be copied in member Text
 */
void OrderCancelReplaceRequest::Text(
        const std::string& _Text)
{
    m_Text = _Text;
}

/*!
 * @brief This function moves the value in member Text
 * @param _Text New value to be moved in member Text
 */
void OrderCancelReplaceRequest::Text(
        std::string&& _Text)
{
    m_Text = std::move(_Text);
}

/*!
 * @brief This function returns a constant reference to member Text
 * @return Constant reference to member Text
 */
const std::string& OrderCancelReplaceRequest::Text() const
{
    return m_Text;
}

/*!
 * @brief This function returns a reference to member Text
 * @return Reference to member Text
 */
std::string& OrderCancelReplaceRequest::Text()
{
    return m_Text;
}




} // namespace DistributedATS_OrderCancelReplaceRequest
// Include auxiliary functions like for serializing/deserializing.
#include "OrderCancelReplaceRequestCdrAux.ipp"

