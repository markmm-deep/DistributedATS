// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MarketDataRequest.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MarketDataRequest.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace DistributedATS_MarketDataRequest {



NoMDEntryTypes::NoMDEntryTypes()
{
}

NoMDEntryTypes::~NoMDEntryTypes()
{
}

NoMDEntryTypes::NoMDEntryTypes(
        const NoMDEntryTypes& x)
{
    m_MDEntryType = x.m_MDEntryType;
}

NoMDEntryTypes::NoMDEntryTypes(
        NoMDEntryTypes&& x) noexcept
{
    m_MDEntryType = x.m_MDEntryType;
}

NoMDEntryTypes& NoMDEntryTypes::operator =(
        const NoMDEntryTypes& x)
{

    m_MDEntryType = x.m_MDEntryType;
    return *this;
}

NoMDEntryTypes& NoMDEntryTypes::operator =(
        NoMDEntryTypes&& x) noexcept
{

    m_MDEntryType = x.m_MDEntryType;
    return *this;
}

bool NoMDEntryTypes::operator ==(
        const NoMDEntryTypes& x) const
{
    return (m_MDEntryType == x.m_MDEntryType);
}

bool NoMDEntryTypes::operator !=(
        const NoMDEntryTypes& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member MDEntryType
 * @param _MDEntryType New value for member MDEntryType
 */
void NoMDEntryTypes::MDEntryType(
        char _MDEntryType)
{
    m_MDEntryType = _MDEntryType;
}

/*!
 * @brief This function returns the value of member MDEntryType
 * @return Value of member MDEntryType
 */
char NoMDEntryTypes::MDEntryType() const
{
    return m_MDEntryType;
}

/*!
 * @brief This function returns a reference to member MDEntryType
 * @return Reference to member MDEntryType
 */
char& NoMDEntryTypes::MDEntryType()
{
    return m_MDEntryType;
}







NoRelatedSym::NoRelatedSym()
{
}

NoRelatedSym::~NoRelatedSym()
{
}

NoRelatedSym::NoRelatedSym(
        const NoRelatedSym& x)
{
    m_Symbol = x.m_Symbol;
    m_SecurityExchange = x.m_SecurityExchange;
}

NoRelatedSym::NoRelatedSym(
        NoRelatedSym&& x) noexcept
{
    m_Symbol = std::move(x.m_Symbol);
    m_SecurityExchange = std::move(x.m_SecurityExchange);
}

NoRelatedSym& NoRelatedSym::operator =(
        const NoRelatedSym& x)
{

    m_Symbol = x.m_Symbol;
    m_SecurityExchange = x.m_SecurityExchange;
    return *this;
}

NoRelatedSym& NoRelatedSym::operator =(
        NoRelatedSym&& x) noexcept
{

    m_Symbol = std::move(x.m_Symbol);
    m_SecurityExchange = std::move(x.m_SecurityExchange);
    return *this;
}

bool NoRelatedSym::operator ==(
        const NoRelatedSym& x) const
{
    return (m_Symbol == x.m_Symbol &&
           m_SecurityExchange == x.m_SecurityExchange);
}

bool NoRelatedSym::operator !=(
        const NoRelatedSym& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member Symbol
 * @param _Symbol New value to be copied in member Symbol
 */
void NoRelatedSym::Symbol(
        const std::string& _Symbol)
{
    m_Symbol = _Symbol;
}

/*!
 * @brief This function moves the value in member Symbol
 * @param _Symbol New value to be moved in member Symbol
 */
void NoRelatedSym::Symbol(
        std::string&& _Symbol)
{
    m_Symbol = std::move(_Symbol);
}

/*!
 * @brief This function returns a constant reference to member Symbol
 * @return Constant reference to member Symbol
 */
const std::string& NoRelatedSym::Symbol() const
{
    return m_Symbol;
}

/*!
 * @brief This function returns a reference to member Symbol
 * @return Reference to member Symbol
 */
std::string& NoRelatedSym::Symbol()
{
    return m_Symbol;
}


/*!
 * @brief This function copies the value in member SecurityExchange
 * @param _SecurityExchange New value to be copied in member SecurityExchange
 */
void NoRelatedSym::SecurityExchange(
        const std::string& _SecurityExchange)
{
    m_SecurityExchange = _SecurityExchange;
}

/*!
 * @brief This function moves the value in member SecurityExchange
 * @param _SecurityExchange New value to be moved in member SecurityExchange
 */
void NoRelatedSym::SecurityExchange(
        std::string&& _SecurityExchange)
{
    m_SecurityExchange = std::move(_SecurityExchange);
}

/*!
 * @brief This function returns a constant reference to member SecurityExchange
 * @return Constant reference to member SecurityExchange
 */
const std::string& NoRelatedSym::SecurityExchange() const
{
    return m_SecurityExchange;
}

/*!
 * @brief This function returns a reference to member SecurityExchange
 * @return Reference to member SecurityExchange
 */
std::string& NoRelatedSym::SecurityExchange()
{
    return m_SecurityExchange;
}







MarketDataRequest::MarketDataRequest()
{
}

MarketDataRequest::~MarketDataRequest()
{
}

MarketDataRequest::MarketDataRequest(
        const MarketDataRequest& x)
{
    m_header = x.m_header;
    m_MDReqID = x.m_MDReqID;
    m_SubscriptionRequestType = x.m_SubscriptionRequestType;
    m_MarketDepth = x.m_MarketDepth;
    m_c_NoMDEntryTypes = x.m_c_NoMDEntryTypes;
    m_c_NoRelatedSym = x.m_c_NoRelatedSym;
}

MarketDataRequest::MarketDataRequest(
        MarketDataRequest&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_MDReqID = std::move(x.m_MDReqID);
    m_SubscriptionRequestType = x.m_SubscriptionRequestType;
    m_MarketDepth = x.m_MarketDepth;
    m_c_NoMDEntryTypes = std::move(x.m_c_NoMDEntryTypes);
    m_c_NoRelatedSym = std::move(x.m_c_NoRelatedSym);
}

MarketDataRequest& MarketDataRequest::operator =(
        const MarketDataRequest& x)
{

    m_header = x.m_header;
    m_MDReqID = x.m_MDReqID;
    m_SubscriptionRequestType = x.m_SubscriptionRequestType;
    m_MarketDepth = x.m_MarketDepth;
    m_c_NoMDEntryTypes = x.m_c_NoMDEntryTypes;
    m_c_NoRelatedSym = x.m_c_NoRelatedSym;
    return *this;
}

MarketDataRequest& MarketDataRequest::operator =(
        MarketDataRequest&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_MDReqID = std::move(x.m_MDReqID);
    m_SubscriptionRequestType = x.m_SubscriptionRequestType;
    m_MarketDepth = x.m_MarketDepth;
    m_c_NoMDEntryTypes = std::move(x.m_c_NoMDEntryTypes);
    m_c_NoRelatedSym = std::move(x.m_c_NoRelatedSym);
    return *this;
}

bool MarketDataRequest::operator ==(
        const MarketDataRequest& x) const
{
    return (m_header == x.m_header &&
           m_MDReqID == x.m_MDReqID &&
           m_SubscriptionRequestType == x.m_SubscriptionRequestType &&
           m_MarketDepth == x.m_MarketDepth &&
           m_c_NoMDEntryTypes == x.m_c_NoMDEntryTypes &&
           m_c_NoRelatedSym == x.m_c_NoRelatedSym);
}

bool MarketDataRequest::operator !=(
        const MarketDataRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void MarketDataRequest::header(
        const DistributedATS::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void MarketDataRequest::header(
        DistributedATS::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const DistributedATS::Header& MarketDataRequest::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
DistributedATS::Header& MarketDataRequest::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member MDReqID
 * @param _MDReqID New value to be copied in member MDReqID
 */
void MarketDataRequest::MDReqID(
        const std::string& _MDReqID)
{
    m_MDReqID = _MDReqID;
}

/*!
 * @brief This function moves the value in member MDReqID
 * @param _MDReqID New value to be moved in member MDReqID
 */
void MarketDataRequest::MDReqID(
        std::string&& _MDReqID)
{
    m_MDReqID = std::move(_MDReqID);
}

/*!
 * @brief This function returns a constant reference to member MDReqID
 * @return Constant reference to member MDReqID
 */
const std::string& MarketDataRequest::MDReqID() const
{
    return m_MDReqID;
}

/*!
 * @brief This function returns a reference to member MDReqID
 * @return Reference to member MDReqID
 */
std::string& MarketDataRequest::MDReqID()
{
    return m_MDReqID;
}


/*!
 * @brief This function sets a value in member SubscriptionRequestType
 * @param _SubscriptionRequestType New value for member SubscriptionRequestType
 */
void MarketDataRequest::SubscriptionRequestType(
        char _SubscriptionRequestType)
{
    m_SubscriptionRequestType = _SubscriptionRequestType;
}

/*!
 * @brief This function returns the value of member SubscriptionRequestType
 * @return Value of member SubscriptionRequestType
 */
char MarketDataRequest::SubscriptionRequestType() const
{
    return m_SubscriptionRequestType;
}

/*!
 * @brief This function returns a reference to member SubscriptionRequestType
 * @return Reference to member SubscriptionRequestType
 */
char& MarketDataRequest::SubscriptionRequestType()
{
    return m_SubscriptionRequestType;
}


/*!
 * @brief This function sets a value in member MarketDepth
 * @param _MarketDepth New value for member MarketDepth
 */
void MarketDataRequest::MarketDepth(
        int32_t _MarketDepth)
{
    m_MarketDepth = _MarketDepth;
}

/*!
 * @brief This function returns the value of member MarketDepth
 * @return Value of member MarketDepth
 */
int32_t MarketDataRequest::MarketDepth() const
{
    return m_MarketDepth;
}

/*!
 * @brief This function returns a reference to member MarketDepth
 * @return Reference to member MarketDepth
 */
int32_t& MarketDataRequest::MarketDepth()
{
    return m_MarketDepth;
}


/*!
 * @brief This function copies the value in member c_NoMDEntryTypes
 * @param _c_NoMDEntryTypes New value to be copied in member c_NoMDEntryTypes
 */
void MarketDataRequest::c_NoMDEntryTypes(
        const DistributedATS_MarketDataRequest::NoMDEntryTypesSeq& _c_NoMDEntryTypes)
{
    m_c_NoMDEntryTypes = _c_NoMDEntryTypes;
}

/*!
 * @brief This function moves the value in member c_NoMDEntryTypes
 * @param _c_NoMDEntryTypes New value to be moved in member c_NoMDEntryTypes
 */
void MarketDataRequest::c_NoMDEntryTypes(
        DistributedATS_MarketDataRequest::NoMDEntryTypesSeq&& _c_NoMDEntryTypes)
{
    m_c_NoMDEntryTypes = std::move(_c_NoMDEntryTypes);
}

/*!
 * @brief This function returns a constant reference to member c_NoMDEntryTypes
 * @return Constant reference to member c_NoMDEntryTypes
 */
const DistributedATS_MarketDataRequest::NoMDEntryTypesSeq& MarketDataRequest::c_NoMDEntryTypes() const
{
    return m_c_NoMDEntryTypes;
}

/*!
 * @brief This function returns a reference to member c_NoMDEntryTypes
 * @return Reference to member c_NoMDEntryTypes
 */
DistributedATS_MarketDataRequest::NoMDEntryTypesSeq& MarketDataRequest::c_NoMDEntryTypes()
{
    return m_c_NoMDEntryTypes;
}


/*!
 * @brief This function copies the value in member c_NoRelatedSym
 * @param _c_NoRelatedSym New value to be copied in member c_NoRelatedSym
 */
void MarketDataRequest::c_NoRelatedSym(
        const DistributedATS_MarketDataRequest::NoRelatedSymSeq& _c_NoRelatedSym)
{
    m_c_NoRelatedSym = _c_NoRelatedSym;
}

/*!
 * @brief This function moves the value in member c_NoRelatedSym
 * @param _c_NoRelatedSym New value to be moved in member c_NoRelatedSym
 */
void MarketDataRequest::c_NoRelatedSym(
        DistributedATS_MarketDataRequest::NoRelatedSymSeq&& _c_NoRelatedSym)
{
    m_c_NoRelatedSym = std::move(_c_NoRelatedSym);
}

/*!
 * @brief This function returns a constant reference to member c_NoRelatedSym
 * @return Constant reference to member c_NoRelatedSym
 */
const DistributedATS_MarketDataRequest::NoRelatedSymSeq& MarketDataRequest::c_NoRelatedSym() const
{
    return m_c_NoRelatedSym;
}

/*!
 * @brief This function returns a reference to member c_NoRelatedSym
 * @return Reference to member c_NoRelatedSym
 */
DistributedATS_MarketDataRequest::NoRelatedSymSeq& MarketDataRequest::c_NoRelatedSym()
{
    return m_c_NoRelatedSym;
}




} // namespace DistributedATS_MarketDataRequest
// Include auxiliary functions like for serializing/deserializing.
#include "MarketDataRequestCdrAux.ipp"

