// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MarketDataSnapshotFullRefresh.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MarketDataSnapshotFullRefresh.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace DistributedATS_MarketDataSnapshotFullRefresh {



NoMDEntries::NoMDEntries()
{
}

NoMDEntries::~NoMDEntries()
{
}

NoMDEntries::NoMDEntries(
        const NoMDEntries& x)
{
    m_MDEntryType = x.m_MDEntryType;
    m_MDEntryPx = x.m_MDEntryPx;
    m_MDEntrySize = x.m_MDEntrySize;
    m_TimeInForce = x.m_TimeInForce;
    m_ExecInst = x.m_ExecInst;
    m_Text = x.m_Text;
}

NoMDEntries::NoMDEntries(
        NoMDEntries&& x) noexcept
{
    m_MDEntryType = x.m_MDEntryType;
    m_MDEntryPx = x.m_MDEntryPx;
    m_MDEntrySize = x.m_MDEntrySize;
    m_TimeInForce = x.m_TimeInForce;
    m_ExecInst = std::move(x.m_ExecInst);
    m_Text = std::move(x.m_Text);
}

NoMDEntries& NoMDEntries::operator =(
        const NoMDEntries& x)
{

    m_MDEntryType = x.m_MDEntryType;
    m_MDEntryPx = x.m_MDEntryPx;
    m_MDEntrySize = x.m_MDEntrySize;
    m_TimeInForce = x.m_TimeInForce;
    m_ExecInst = x.m_ExecInst;
    m_Text = x.m_Text;
    return *this;
}

NoMDEntries& NoMDEntries::operator =(
        NoMDEntries&& x) noexcept
{

    m_MDEntryType = x.m_MDEntryType;
    m_MDEntryPx = x.m_MDEntryPx;
    m_MDEntrySize = x.m_MDEntrySize;
    m_TimeInForce = x.m_TimeInForce;
    m_ExecInst = std::move(x.m_ExecInst);
    m_Text = std::move(x.m_Text);
    return *this;
}

bool NoMDEntries::operator ==(
        const NoMDEntries& x) const
{
    return (m_MDEntryType == x.m_MDEntryType &&
           m_MDEntryPx == x.m_MDEntryPx &&
           m_MDEntrySize == x.m_MDEntrySize &&
           m_TimeInForce == x.m_TimeInForce &&
           m_ExecInst == x.m_ExecInst &&
           m_Text == x.m_Text);
}

bool NoMDEntries::operator !=(
        const NoMDEntries& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member MDEntryType
 * @param _MDEntryType New value for member MDEntryType
 */
void NoMDEntries::MDEntryType(
        char _MDEntryType)
{
    m_MDEntryType = _MDEntryType;
}

/*!
 * @brief This function returns the value of member MDEntryType
 * @return Value of member MDEntryType
 */
char NoMDEntries::MDEntryType() const
{
    return m_MDEntryType;
}

/*!
 * @brief This function returns a reference to member MDEntryType
 * @return Reference to member MDEntryType
 */
char& NoMDEntries::MDEntryType()
{
    return m_MDEntryType;
}


/*!
 * @brief This function sets a value in member MDEntryPx
 * @param _MDEntryPx New value for member MDEntryPx
 */
void NoMDEntries::MDEntryPx(
        float _MDEntryPx)
{
    m_MDEntryPx = _MDEntryPx;
}

/*!
 * @brief This function returns the value of member MDEntryPx
 * @return Value of member MDEntryPx
 */
float NoMDEntries::MDEntryPx() const
{
    return m_MDEntryPx;
}

/*!
 * @brief This function returns a reference to member MDEntryPx
 * @return Reference to member MDEntryPx
 */
float& NoMDEntries::MDEntryPx()
{
    return m_MDEntryPx;
}


/*!
 * @brief This function sets a value in member MDEntrySize
 * @param _MDEntrySize New value for member MDEntrySize
 */
void NoMDEntries::MDEntrySize(
        int32_t _MDEntrySize)
{
    m_MDEntrySize = _MDEntrySize;
}

/*!
 * @brief This function returns the value of member MDEntrySize
 * @return Value of member MDEntrySize
 */
int32_t NoMDEntries::MDEntrySize() const
{
    return m_MDEntrySize;
}

/*!
 * @brief This function returns a reference to member MDEntrySize
 * @return Reference to member MDEntrySize
 */
int32_t& NoMDEntries::MDEntrySize()
{
    return m_MDEntrySize;
}


/*!
 * @brief This function sets a value in member TimeInForce
 * @param _TimeInForce New value for member TimeInForce
 */
void NoMDEntries::TimeInForce(
        char _TimeInForce)
{
    m_TimeInForce = _TimeInForce;
}

/*!
 * @brief This function returns the value of member TimeInForce
 * @return Value of member TimeInForce
 */
char NoMDEntries::TimeInForce() const
{
    return m_TimeInForce;
}

/*!
 * @brief This function returns a reference to member TimeInForce
 * @return Reference to member TimeInForce
 */
char& NoMDEntries::TimeInForce()
{
    return m_TimeInForce;
}


/*!
 * @brief This function copies the value in member ExecInst
 * @param _ExecInst New value to be copied in member ExecInst
 */
void NoMDEntries::ExecInst(
        const std::string& _ExecInst)
{
    m_ExecInst = _ExecInst;
}

/*!
 * @brief This function moves the value in member ExecInst
 * @param _ExecInst New value to be moved in member ExecInst
 */
void NoMDEntries::ExecInst(
        std::string&& _ExecInst)
{
    m_ExecInst = std::move(_ExecInst);
}

/*!
 * @brief This function returns a constant reference to member ExecInst
 * @return Constant reference to member ExecInst
 */
const std::string& NoMDEntries::ExecInst() const
{
    return m_ExecInst;
}

/*!
 * @brief This function returns a reference to member ExecInst
 * @return Reference to member ExecInst
 */
std::string& NoMDEntries::ExecInst()
{
    return m_ExecInst;
}


/*!
 * @brief This function copies the value in member Text
 * @param _Text New value to be copied in member Text
 */
void NoMDEntries::Text(
        const std::string& _Text)
{
    m_Text = _Text;
}

/*!
 * @brief This function moves the value in member Text
 * @param _Text New value to be moved in member Text
 */
void NoMDEntries::Text(
        std::string&& _Text)
{
    m_Text = std::move(_Text);
}

/*!
 * @brief This function returns a constant reference to member Text
 * @return Constant reference to member Text
 */
const std::string& NoMDEntries::Text() const
{
    return m_Text;
}

/*!
 * @brief This function returns a reference to member Text
 * @return Reference to member Text
 */
std::string& NoMDEntries::Text()
{
    return m_Text;
}







MarketDataSnapshotFullRefresh::MarketDataSnapshotFullRefresh()
{
}

MarketDataSnapshotFullRefresh::~MarketDataSnapshotFullRefresh()
{
}

MarketDataSnapshotFullRefresh::MarketDataSnapshotFullRefresh(
        const MarketDataSnapshotFullRefresh& x)
{
    m_header = x.m_header;
    m_MDReqID = x.m_MDReqID;
    m_Symbol = x.m_Symbol;
    m_SecurityExchange = x.m_SecurityExchange;
    m_c_NoMDEntries = x.m_c_NoMDEntries;
}

MarketDataSnapshotFullRefresh::MarketDataSnapshotFullRefresh(
        MarketDataSnapshotFullRefresh&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_MDReqID = std::move(x.m_MDReqID);
    m_Symbol = std::move(x.m_Symbol);
    m_SecurityExchange = std::move(x.m_SecurityExchange);
    m_c_NoMDEntries = std::move(x.m_c_NoMDEntries);
}

MarketDataSnapshotFullRefresh& MarketDataSnapshotFullRefresh::operator =(
        const MarketDataSnapshotFullRefresh& x)
{

    m_header = x.m_header;
    m_MDReqID = x.m_MDReqID;
    m_Symbol = x.m_Symbol;
    m_SecurityExchange = x.m_SecurityExchange;
    m_c_NoMDEntries = x.m_c_NoMDEntries;
    return *this;
}

MarketDataSnapshotFullRefresh& MarketDataSnapshotFullRefresh::operator =(
        MarketDataSnapshotFullRefresh&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_MDReqID = std::move(x.m_MDReqID);
    m_Symbol = std::move(x.m_Symbol);
    m_SecurityExchange = std::move(x.m_SecurityExchange);
    m_c_NoMDEntries = std::move(x.m_c_NoMDEntries);
    return *this;
}

bool MarketDataSnapshotFullRefresh::operator ==(
        const MarketDataSnapshotFullRefresh& x) const
{
    return (m_header == x.m_header &&
           m_MDReqID == x.m_MDReqID &&
           m_Symbol == x.m_Symbol &&
           m_SecurityExchange == x.m_SecurityExchange &&
           m_c_NoMDEntries == x.m_c_NoMDEntries);
}

bool MarketDataSnapshotFullRefresh::operator !=(
        const MarketDataSnapshotFullRefresh& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void MarketDataSnapshotFullRefresh::header(
        const DistributedATS::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void MarketDataSnapshotFullRefresh::header(
        DistributedATS::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const DistributedATS::Header& MarketDataSnapshotFullRefresh::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
DistributedATS::Header& MarketDataSnapshotFullRefresh::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member MDReqID
 * @param _MDReqID New value to be copied in member MDReqID
 */
void MarketDataSnapshotFullRefresh::MDReqID(
        const std::string& _MDReqID)
{
    m_MDReqID = _MDReqID;
}

/*!
 * @brief This function moves the value in member MDReqID
 * @param _MDReqID New value to be moved in member MDReqID
 */
void MarketDataSnapshotFullRefresh::MDReqID(
        std::string&& _MDReqID)
{
    m_MDReqID = std::move(_MDReqID);
}

/*!
 * @brief This function returns a constant reference to member MDReqID
 * @return Constant reference to member MDReqID
 */
const std::string& MarketDataSnapshotFullRefresh::MDReqID() const
{
    return m_MDReqID;
}

/*!
 * @brief This function returns a reference to member MDReqID
 * @return Reference to member MDReqID
 */
std::string& MarketDataSnapshotFullRefresh::MDReqID()
{
    return m_MDReqID;
}


/*!
 * @brief This function copies the value in member Symbol
 * @param _Symbol New value to be copied in member Symbol
 */
void MarketDataSnapshotFullRefresh::Symbol(
        const std::string& _Symbol)
{
    m_Symbol = _Symbol;
}

/*!
 * @brief This function moves the value in member Symbol
 * @param _Symbol New value to be moved in member Symbol
 */
void MarketDataSnapshotFullRefresh::Symbol(
        std::string&& _Symbol)
{
    m_Symbol = std::move(_Symbol);
}

/*!
 * @brief This function returns a constant reference to member Symbol
 * @return Constant reference to member Symbol
 */
const std::string& MarketDataSnapshotFullRefresh::Symbol() const
{
    return m_Symbol;
}

/*!
 * @brief This function returns a reference to member Symbol
 * @return Reference to member Symbol
 */
std::string& MarketDataSnapshotFullRefresh::Symbol()
{
    return m_Symbol;
}


/*!
 * @brief This function copies the value in member SecurityExchange
 * @param _SecurityExchange New value to be copied in member SecurityExchange
 */
void MarketDataSnapshotFullRefresh::SecurityExchange(
        const std::string& _SecurityExchange)
{
    m_SecurityExchange = _SecurityExchange;
}

/*!
 * @brief This function moves the value in member SecurityExchange
 * @param _SecurityExchange New value to be moved in member SecurityExchange
 */
void MarketDataSnapshotFullRefresh::SecurityExchange(
        std::string&& _SecurityExchange)
{
    m_SecurityExchange = std::move(_SecurityExchange);
}

/*!
 * @brief This function returns a constant reference to member SecurityExchange
 * @return Constant reference to member SecurityExchange
 */
const std::string& MarketDataSnapshotFullRefresh::SecurityExchange() const
{
    return m_SecurityExchange;
}

/*!
 * @brief This function returns a reference to member SecurityExchange
 * @return Reference to member SecurityExchange
 */
std::string& MarketDataSnapshotFullRefresh::SecurityExchange()
{
    return m_SecurityExchange;
}


/*!
 * @brief This function copies the value in member c_NoMDEntries
 * @param _c_NoMDEntries New value to be copied in member c_NoMDEntries
 */
void MarketDataSnapshotFullRefresh::c_NoMDEntries(
        const DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntriesSeq& _c_NoMDEntries)
{
    m_c_NoMDEntries = _c_NoMDEntries;
}

/*!
 * @brief This function moves the value in member c_NoMDEntries
 * @param _c_NoMDEntries New value to be moved in member c_NoMDEntries
 */
void MarketDataSnapshotFullRefresh::c_NoMDEntries(
        DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntriesSeq&& _c_NoMDEntries)
{
    m_c_NoMDEntries = std::move(_c_NoMDEntries);
}

/*!
 * @brief This function returns a constant reference to member c_NoMDEntries
 * @return Constant reference to member c_NoMDEntries
 */
const DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntriesSeq& MarketDataSnapshotFullRefresh::c_NoMDEntries() const
{
    return m_c_NoMDEntries;
}

/*!
 * @brief This function returns a reference to member c_NoMDEntries
 * @return Reference to member c_NoMDEntries
 */
DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntriesSeq& MarketDataSnapshotFullRefresh::c_NoMDEntries()
{
    return m_c_NoMDEntries;
}




} // namespace DistributedATS_MarketDataSnapshotFullRefresh
// Include auxiliary functions like for serializing/deserializing.
#include "MarketDataSnapshotFullRefreshCdrAux.ipp"

