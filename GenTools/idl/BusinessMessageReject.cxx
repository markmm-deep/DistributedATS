// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BusinessMessageReject.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "BusinessMessageReject.h"

#include "BusinessMessageRejectTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace DistributedATS_BusinessMessageReject {



BusinessMessageReject::BusinessMessageReject()
{
    // Just to register all known types
    registerBusinessMessageRejectTypes();
}

BusinessMessageReject::~BusinessMessageReject()
{
}

BusinessMessageReject::BusinessMessageReject(
        const BusinessMessageReject& x)
{
    m_header = x.m_header;
    m_RefMsgType = x.m_RefMsgType;
    m_BusinessRejectReason = x.m_BusinessRejectReason;
    m_Text = x.m_Text;
}

BusinessMessageReject::BusinessMessageReject(
        BusinessMessageReject&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_RefMsgType = std::move(x.m_RefMsgType);
    m_BusinessRejectReason = x.m_BusinessRejectReason;
    m_Text = std::move(x.m_Text);
}

BusinessMessageReject& BusinessMessageReject::operator =(
        const BusinessMessageReject& x)
{

    m_header = x.m_header;
    m_RefMsgType = x.m_RefMsgType;
    m_BusinessRejectReason = x.m_BusinessRejectReason;
    m_Text = x.m_Text;
    return *this;
}

BusinessMessageReject& BusinessMessageReject::operator =(
        BusinessMessageReject&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_RefMsgType = std::move(x.m_RefMsgType);
    m_BusinessRejectReason = x.m_BusinessRejectReason;
    m_Text = std::move(x.m_Text);
    return *this;
}

bool BusinessMessageReject::operator ==(
        const BusinessMessageReject& x) const
{
    return (m_header == x.m_header &&
           m_RefMsgType == x.m_RefMsgType &&
           m_BusinessRejectReason == x.m_BusinessRejectReason &&
           m_Text == x.m_Text);
}

bool BusinessMessageReject::operator !=(
        const BusinessMessageReject& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void BusinessMessageReject::header(
        const DistributedATS::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void BusinessMessageReject::header(
        DistributedATS::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const DistributedATS::Header& BusinessMessageReject::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
DistributedATS::Header& BusinessMessageReject::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member RefMsgType
 * @param _RefMsgType New value to be copied in member RefMsgType
 */
void BusinessMessageReject::RefMsgType(
        const std::string& _RefMsgType)
{
    m_RefMsgType = _RefMsgType;
}

/*!
 * @brief This function moves the value in member RefMsgType
 * @param _RefMsgType New value to be moved in member RefMsgType
 */
void BusinessMessageReject::RefMsgType(
        std::string&& _RefMsgType)
{
    m_RefMsgType = std::move(_RefMsgType);
}

/*!
 * @brief This function returns a constant reference to member RefMsgType
 * @return Constant reference to member RefMsgType
 */
const std::string& BusinessMessageReject::RefMsgType() const
{
    return m_RefMsgType;
}

/*!
 * @brief This function returns a reference to member RefMsgType
 * @return Reference to member RefMsgType
 */
std::string& BusinessMessageReject::RefMsgType()
{
    return m_RefMsgType;
}


/*!
 * @brief This function sets a value in member BusinessRejectReason
 * @param _BusinessRejectReason New value for member BusinessRejectReason
 */
void BusinessMessageReject::BusinessRejectReason(
        int32_t _BusinessRejectReason)
{
    m_BusinessRejectReason = _BusinessRejectReason;
}

/*!
 * @brief This function returns the value of member BusinessRejectReason
 * @return Value of member BusinessRejectReason
 */
int32_t BusinessMessageReject::BusinessRejectReason() const
{
    return m_BusinessRejectReason;
}

/*!
 * @brief This function returns a reference to member BusinessRejectReason
 * @return Reference to member BusinessRejectReason
 */
int32_t& BusinessMessageReject::BusinessRejectReason()
{
    return m_BusinessRejectReason;
}


/*!
 * @brief This function copies the value in member Text
 * @param _Text New value to be copied in member Text
 */
void BusinessMessageReject::Text(
        const std::string& _Text)
{
    m_Text = _Text;
}

/*!
 * @brief This function moves the value in member Text
 * @param _Text New value to be moved in member Text
 */
void BusinessMessageReject::Text(
        std::string&& _Text)
{
    m_Text = std::move(_Text);
}

/*!
 * @brief This function returns a constant reference to member Text
 * @return Constant reference to member Text
 */
const std::string& BusinessMessageReject::Text() const
{
    return m_Text;
}

/*!
 * @brief This function returns a reference to member Text
 * @return Reference to member Text
 */
std::string& BusinessMessageReject::Text()
{
    return m_Text;
}




} // namespace DistributedATS_BusinessMessageReject
// Include auxiliary functions like for serializing/deserializing.
#include "BusinessMessageRejectCdrAux.ipp"

