// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OrderCancelRequestTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "OrderCancelRequest.h"
#include "OrderCancelRequestTypeObject.h"
#include <mutex>
#include <utility>
#include <sstream>
#include <fastdds/rtps/common/CdrSerialization.hpp>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>

using namespace eprosima::fastrtps::rtps;

void registerOrderCancelRequestTypes()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                TypeObjectFactory *factory = TypeObjectFactory::get_instance();
                factory->add_type_object("DistributedATS::Header", DistributedATS::GetHeaderIdentifier(true),
                        DistributedATS::GetHeaderObject(true));
                factory->add_type_object("DistributedATS::Header", DistributedATS::GetHeaderIdentifier(false),
                        DistributedATS::GetHeaderObject(false));



                factory->add_type_object("DistributedATS_OrderCancelRequest::OrderCancelRequest", DistributedATS_OrderCancelRequest::GetOrderCancelRequestIdentifier(true),
                        DistributedATS_OrderCancelRequest::GetOrderCancelRequestObject(true));
                factory->add_type_object("DistributedATS_OrderCancelRequest::OrderCancelRequest", DistributedATS_OrderCancelRequest::GetOrderCancelRequestIdentifier(false),
                        DistributedATS_OrderCancelRequest::GetOrderCancelRequestObject(false));


            });
}

namespace DistributedATS_OrderCancelRequest {


    const TypeIdentifier* GetOrderCancelRequestIdentifier(bool complete)
    {
        const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("OrderCancelRequest", complete);
        if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
        {
            return c_identifier;
        }

        GetOrderCancelRequestObject(complete); // Generated inside
        return TypeObjectFactory::get_instance()->get_type_identifier("OrderCancelRequest", complete);
    }

    const TypeObject* GetOrderCancelRequestObject(bool complete)
    {
        const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("OrderCancelRequest", complete);
        if (c_type_object != nullptr)
        {
            return c_type_object;
        }
        else if (complete)
        {
            return GetCompleteOrderCancelRequestObject();
        }
        //else
        return GetMinimalOrderCancelRequestObject();
    }

    const TypeObject* GetMinimalOrderCancelRequestObject()
    {
        const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("OrderCancelRequest", false);
        if (c_type_object != nullptr)
        {
            return c_type_object;
        }

        TypeObject *type_object = new TypeObject();
        type_object->_d(EK_MINIMAL);
        type_object->minimal()._d(TK_STRUCTURE);

        type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
        type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
        type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
        type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
        type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

        MemberId memberId = 0;
        MinimalStructMember mst_header;
        mst_header.common().member_id(memberId++);
        mst_header.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        mst_header.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        mst_header.common().member_flags().IS_EXTERNAL(false); // Unsupported
        mst_header.common().member_flags().IS_OPTIONAL(false);
        mst_header.common().member_flags().IS_MUST_UNDERSTAND(false);
        mst_header.common().member_flags().IS_KEY(false);
        mst_header.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        mst_header.common().member_type_id(*DistributedATS::GetHeaderIdentifier(false));

        MD5 header_hash("header");
        for(int i = 0; i < 4; ++i)
        {
            mst_header.detail().name_hash()[i] = header_hash.digest[i];
        }
        type_object->minimal().struct_type().member_seq().emplace_back(mst_header);

        MinimalStructMember mst_OrigClOrdID;
        mst_OrigClOrdID.common().member_id(memberId++);
        mst_OrigClOrdID.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        mst_OrigClOrdID.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        mst_OrigClOrdID.common().member_flags().IS_EXTERNAL(false); // Unsupported
        mst_OrigClOrdID.common().member_flags().IS_OPTIONAL(false);
        mst_OrigClOrdID.common().member_flags().IS_MUST_UNDERSTAND(false);
        mst_OrigClOrdID.common().member_flags().IS_KEY(false);
        mst_OrigClOrdID.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        mst_OrigClOrdID.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

        MD5 OrigClOrdID_hash("OrigClOrdID");
        for(int i = 0; i < 4; ++i)
        {
            mst_OrigClOrdID.detail().name_hash()[i] = OrigClOrdID_hash.digest[i];
        }
        type_object->minimal().struct_type().member_seq().emplace_back(mst_OrigClOrdID);

        MinimalStructMember mst_ClOrdID;
        mst_ClOrdID.common().member_id(memberId++);
        mst_ClOrdID.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        mst_ClOrdID.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        mst_ClOrdID.common().member_flags().IS_EXTERNAL(false); // Unsupported
        mst_ClOrdID.common().member_flags().IS_OPTIONAL(false);
        mst_ClOrdID.common().member_flags().IS_MUST_UNDERSTAND(false);
        mst_ClOrdID.common().member_flags().IS_KEY(false);
        mst_ClOrdID.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        mst_ClOrdID.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

        MD5 ClOrdID_hash("ClOrdID");
        for(int i = 0; i < 4; ++i)
        {
            mst_ClOrdID.detail().name_hash()[i] = ClOrdID_hash.digest[i];
        }
        type_object->minimal().struct_type().member_seq().emplace_back(mst_ClOrdID);

        MinimalStructMember mst_Symbol;
        mst_Symbol.common().member_id(memberId++);
        mst_Symbol.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        mst_Symbol.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        mst_Symbol.common().member_flags().IS_EXTERNAL(false); // Unsupported
        mst_Symbol.common().member_flags().IS_OPTIONAL(false);
        mst_Symbol.common().member_flags().IS_MUST_UNDERSTAND(false);
        mst_Symbol.common().member_flags().IS_KEY(false);
        mst_Symbol.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        mst_Symbol.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

        MD5 Symbol_hash("Symbol");
        for(int i = 0; i < 4; ++i)
        {
            mst_Symbol.detail().name_hash()[i] = Symbol_hash.digest[i];
        }
        type_object->minimal().struct_type().member_seq().emplace_back(mst_Symbol);

        MinimalStructMember mst_SecurityExchange;
        mst_SecurityExchange.common().member_id(memberId++);
        mst_SecurityExchange.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        mst_SecurityExchange.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        mst_SecurityExchange.common().member_flags().IS_EXTERNAL(false); // Unsupported
        mst_SecurityExchange.common().member_flags().IS_OPTIONAL(false);
        mst_SecurityExchange.common().member_flags().IS_MUST_UNDERSTAND(false);
        mst_SecurityExchange.common().member_flags().IS_KEY(false);
        mst_SecurityExchange.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        mst_SecurityExchange.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

        MD5 SecurityExchange_hash("SecurityExchange");
        for(int i = 0; i < 4; ++i)
        {
            mst_SecurityExchange.detail().name_hash()[i] = SecurityExchange_hash.digest[i];
        }
        type_object->minimal().struct_type().member_seq().emplace_back(mst_SecurityExchange);

        MinimalStructMember mst_Side;
        mst_Side.common().member_id(memberId++);
        mst_Side.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        mst_Side.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        mst_Side.common().member_flags().IS_EXTERNAL(false); // Unsupported
        mst_Side.common().member_flags().IS_OPTIONAL(false);
        mst_Side.common().member_flags().IS_MUST_UNDERSTAND(false);
        mst_Side.common().member_flags().IS_KEY(false);
        mst_Side.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        mst_Side.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("char", false));


        MD5 Side_hash("Side");
        for(int i = 0; i < 4; ++i)
        {
            mst_Side.detail().name_hash()[i] = Side_hash.digest[i];
        }
        type_object->minimal().struct_type().member_seq().emplace_back(mst_Side);

        MinimalStructMember mst_TransactTime;
        mst_TransactTime.common().member_id(memberId++);
        mst_TransactTime.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        mst_TransactTime.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        mst_TransactTime.common().member_flags().IS_EXTERNAL(false); // Unsupported
        mst_TransactTime.common().member_flags().IS_OPTIONAL(false);
        mst_TransactTime.common().member_flags().IS_MUST_UNDERSTAND(false);
        mst_TransactTime.common().member_flags().IS_KEY(false);
        mst_TransactTime.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        mst_TransactTime.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));


        MD5 TransactTime_hash("TransactTime");
        for(int i = 0; i < 4; ++i)
        {
            mst_TransactTime.detail().name_hash()[i] = TransactTime_hash.digest[i];
        }
        type_object->minimal().struct_type().member_seq().emplace_back(mst_TransactTime);

        MinimalStructMember mst_OrderQty;
        mst_OrderQty.common().member_id(memberId++);
        mst_OrderQty.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        mst_OrderQty.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        mst_OrderQty.common().member_flags().IS_EXTERNAL(false); // Unsupported
        mst_OrderQty.common().member_flags().IS_OPTIONAL(false);
        mst_OrderQty.common().member_flags().IS_MUST_UNDERSTAND(false);
        mst_OrderQty.common().member_flags().IS_KEY(false);
        mst_OrderQty.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        mst_OrderQty.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


        MD5 OrderQty_hash("OrderQty");
        for(int i = 0; i < 4; ++i)
        {
            mst_OrderQty.detail().name_hash()[i] = OrderQty_hash.digest[i];
        }
        type_object->minimal().struct_type().member_seq().emplace_back(mst_OrderQty);

        MinimalStructMember mst_Text;
        mst_Text.common().member_id(memberId++);
        mst_Text.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        mst_Text.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        mst_Text.common().member_flags().IS_EXTERNAL(false); // Unsupported
        mst_Text.common().member_flags().IS_OPTIONAL(false);
        mst_Text.common().member_flags().IS_MUST_UNDERSTAND(false);
        mst_Text.common().member_flags().IS_KEY(false);
        mst_Text.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        mst_Text.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

        MD5 Text_hash("Text");
        for(int i = 0; i < 4; ++i)
        {
            mst_Text.detail().name_hash()[i] = Text_hash.digest[i];
        }
        type_object->minimal().struct_type().member_seq().emplace_back(mst_Text);


        // Header
        // TODO Inheritance
        //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
        //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];
        TypeIdentifier identifier;
        identifier._d(EK_MINIMAL);

        eprosima::fastcdr::CdrSizeCalculator calculator(eprosima::fastcdr::CdrVersion::XCDRv1);
        size_t current_alignment {0};
        SerializedPayload_t payload(static_cast<uint32_t>(
            calculator.calculate_serialized_size(type_object->minimal().struct_type(), current_alignment) + 4));
        eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
        // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
        eprosima::fastcdr::Cdr ser(
            fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
            eprosima::fastcdr::CdrVersion::XCDRv1); // Object that serializes the data.
        payload.encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

        ser << *type_object;
    #if FASTCDR_VERSION_MAJOR == 1
        payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    #else
        payload.length = (uint32_t)ser.get_serialized_data_length(); //Get the serialized length
    #endif // FASTCDR_VERSION_MAJOR == 1
        MD5 objectHash;
        objectHash.update((char*)payload.data, payload.length);
        objectHash.finalize();
        for(int i = 0; i < 14; ++i)
        {
            identifier.equivalence_hash()[i] = objectHash.digest[i];
        }

        TypeObjectFactory::get_instance()->add_type_object("OrderCancelRequest", &identifier, type_object);
        delete type_object;
        return TypeObjectFactory::get_instance()->get_type_object("OrderCancelRequest", false);
    }

    const TypeObject* GetCompleteOrderCancelRequestObject()
    {
        const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("OrderCancelRequest", true);
        if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
        {
            return c_type_object;
        }

        TypeObject *type_object = new TypeObject();
        type_object->_d(EK_COMPLETE);
        type_object->complete()._d(TK_STRUCTURE);

        type_object->complete().struct_type().struct_flags().IS_FINAL(false);
        type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
        type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
        type_object->complete().struct_type().struct_flags().IS_NESTED(false);
        type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

        MemberId memberId = 0;
        CompleteStructMember cst_header;
        cst_header.common().member_id(memberId++);
        cst_header.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        cst_header.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        cst_header.common().member_flags().IS_EXTERNAL(false); // Unsupported
        cst_header.common().member_flags().IS_OPTIONAL(false);
        cst_header.common().member_flags().IS_MUST_UNDERSTAND(false);
        cst_header.common().member_flags().IS_KEY(false);
        cst_header.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        cst_header.common().member_type_id(*DistributedATS::GetHeaderIdentifier(true));

        cst_header.detail().name("header");

        type_object->complete().struct_type().member_seq().emplace_back(cst_header);

        CompleteStructMember cst_OrigClOrdID;
        cst_OrigClOrdID.common().member_id(memberId++);
        cst_OrigClOrdID.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        cst_OrigClOrdID.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        cst_OrigClOrdID.common().member_flags().IS_EXTERNAL(false); // Unsupported
        cst_OrigClOrdID.common().member_flags().IS_OPTIONAL(false);
        cst_OrigClOrdID.common().member_flags().IS_MUST_UNDERSTAND(false);
        cst_OrigClOrdID.common().member_flags().IS_KEY(false);
        cst_OrigClOrdID.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        cst_OrigClOrdID.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

        cst_OrigClOrdID.detail().name("OrigClOrdID");

        type_object->complete().struct_type().member_seq().emplace_back(cst_OrigClOrdID);

        CompleteStructMember cst_ClOrdID;
        cst_ClOrdID.common().member_id(memberId++);
        cst_ClOrdID.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        cst_ClOrdID.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        cst_ClOrdID.common().member_flags().IS_EXTERNAL(false); // Unsupported
        cst_ClOrdID.common().member_flags().IS_OPTIONAL(false);
        cst_ClOrdID.common().member_flags().IS_MUST_UNDERSTAND(false);
        cst_ClOrdID.common().member_flags().IS_KEY(false);
        cst_ClOrdID.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        cst_ClOrdID.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

        cst_ClOrdID.detail().name("ClOrdID");

        type_object->complete().struct_type().member_seq().emplace_back(cst_ClOrdID);

        CompleteStructMember cst_Symbol;
        cst_Symbol.common().member_id(memberId++);
        cst_Symbol.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        cst_Symbol.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        cst_Symbol.common().member_flags().IS_EXTERNAL(false); // Unsupported
        cst_Symbol.common().member_flags().IS_OPTIONAL(false);
        cst_Symbol.common().member_flags().IS_MUST_UNDERSTAND(false);
        cst_Symbol.common().member_flags().IS_KEY(false);
        cst_Symbol.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        cst_Symbol.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

        cst_Symbol.detail().name("Symbol");

        type_object->complete().struct_type().member_seq().emplace_back(cst_Symbol);

        CompleteStructMember cst_SecurityExchange;
        cst_SecurityExchange.common().member_id(memberId++);
        cst_SecurityExchange.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        cst_SecurityExchange.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        cst_SecurityExchange.common().member_flags().IS_EXTERNAL(false); // Unsupported
        cst_SecurityExchange.common().member_flags().IS_OPTIONAL(false);
        cst_SecurityExchange.common().member_flags().IS_MUST_UNDERSTAND(false);
        cst_SecurityExchange.common().member_flags().IS_KEY(false);
        cst_SecurityExchange.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        cst_SecurityExchange.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

        cst_SecurityExchange.detail().name("SecurityExchange");

        type_object->complete().struct_type().member_seq().emplace_back(cst_SecurityExchange);

        CompleteStructMember cst_Side;
        cst_Side.common().member_id(memberId++);
        cst_Side.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        cst_Side.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        cst_Side.common().member_flags().IS_EXTERNAL(false); // Unsupported
        cst_Side.common().member_flags().IS_OPTIONAL(false);
        cst_Side.common().member_flags().IS_MUST_UNDERSTAND(false);
        cst_Side.common().member_flags().IS_KEY(false);
        cst_Side.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        cst_Side.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("char", false));


        cst_Side.detail().name("Side");

        type_object->complete().struct_type().member_seq().emplace_back(cst_Side);

        CompleteStructMember cst_TransactTime;
        cst_TransactTime.common().member_id(memberId++);
        cst_TransactTime.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        cst_TransactTime.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        cst_TransactTime.common().member_flags().IS_EXTERNAL(false); // Unsupported
        cst_TransactTime.common().member_flags().IS_OPTIONAL(false);
        cst_TransactTime.common().member_flags().IS_MUST_UNDERSTAND(false);
        cst_TransactTime.common().member_flags().IS_KEY(false);
        cst_TransactTime.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        cst_TransactTime.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));


        cst_TransactTime.detail().name("TransactTime");

        type_object->complete().struct_type().member_seq().emplace_back(cst_TransactTime);

        CompleteStructMember cst_OrderQty;
        cst_OrderQty.common().member_id(memberId++);
        cst_OrderQty.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        cst_OrderQty.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        cst_OrderQty.common().member_flags().IS_EXTERNAL(false); // Unsupported
        cst_OrderQty.common().member_flags().IS_OPTIONAL(false);
        cst_OrderQty.common().member_flags().IS_MUST_UNDERSTAND(false);
        cst_OrderQty.common().member_flags().IS_KEY(false);
        cst_OrderQty.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        cst_OrderQty.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


        cst_OrderQty.detail().name("OrderQty");

        type_object->complete().struct_type().member_seq().emplace_back(cst_OrderQty);

        CompleteStructMember cst_Text;
        cst_Text.common().member_id(memberId++);
        cst_Text.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
        cst_Text.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
        cst_Text.common().member_flags().IS_EXTERNAL(false); // Unsupported
        cst_Text.common().member_flags().IS_OPTIONAL(false);
        cst_Text.common().member_flags().IS_MUST_UNDERSTAND(false);
        cst_Text.common().member_flags().IS_KEY(false);
        cst_Text.common().member_flags().IS_DEFAULT(false); // Doesn't apply
        cst_Text.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

        cst_Text.detail().name("Text");

        type_object->complete().struct_type().member_seq().emplace_back(cst_Text);


        // Header
        type_object->complete().struct_type().header().detail().type_name("OrderCancelRequest");
        // TODO inheritance
        TypeIdentifier identifier;
        identifier._d(EK_COMPLETE);

        eprosima::fastcdr::CdrSizeCalculator calculator(eprosima::fastcdr::CdrVersion::XCDRv1);
        size_t current_alignment {0};
        SerializedPayload_t payload(static_cast<uint32_t>(
            calculator.calculate_serialized_size(type_object->complete().struct_type(), current_alignment) + 4));
        eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
        // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
        eprosima::fastcdr::Cdr ser(
            fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
            eprosima::fastcdr::CdrVersion::XCDRv1); // Object that serializes the data.
        payload.encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

        ser << *type_object;
    #if FASTCDR_VERSION_MAJOR == 1
        payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    #else
        payload.length = (uint32_t)ser.get_serialized_data_length(); //Get the serialized length
    #endif // FASTCDR_VERSION_MAJOR == 1
        MD5 objectHash;
        objectHash.update((char*)payload.data, payload.length);
        objectHash.finalize();
        for(int i = 0; i < 14; ++i)
        {
            identifier.equivalence_hash()[i] = objectHash.digest[i];
        }

        TypeObjectFactory::get_instance()->add_type_object("OrderCancelRequest", &identifier, type_object);
        delete type_object;
        return TypeObjectFactory::get_instance()->get_type_object("OrderCancelRequest", true);
    }

} // namespace DistributedATS_OrderCancelRequest